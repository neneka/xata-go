// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type AggResponseValuesValues struct {
	typeName                        string
	AggResponseValuesValuesItemList []*AggResponseValuesValuesItem
	StringDoubleMap                 map[string]float64
}

func NewAggResponseValuesValuesFromAggResponseValuesValuesItemList(value []*AggResponseValuesValuesItem) *AggResponseValuesValues {
	return &AggResponseValuesValues{typeName: "aggResponseValuesValuesItemList", AggResponseValuesValuesItemList: value}
}

func NewAggResponseValuesValuesFromStringDoubleMap(value map[string]float64) *AggResponseValuesValues {
	return &AggResponseValuesValues{typeName: "stringDoubleMap", StringDoubleMap: value}
}

func (a *AggResponseValuesValues) UnmarshalJSON(data []byte) error {
	var valueAggResponseValuesValuesItemList []*AggResponseValuesValuesItem
	if err := json.Unmarshal(data, &valueAggResponseValuesValuesItemList); err == nil {
		a.typeName = "aggResponseValuesValuesItemList"
		a.AggResponseValuesValuesItemList = valueAggResponseValuesValuesItemList
		return nil
	}
	var valueStringDoubleMap map[string]float64
	if err := json.Unmarshal(data, &valueStringDoubleMap); err == nil {
		a.typeName = "stringDoubleMap"
		a.StringDoubleMap = valueStringDoubleMap
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, a)
}

func (a AggResponseValuesValues) MarshalJSON() ([]byte, error) {
	switch a.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "aggResponseValuesValuesItemList":
		return json.Marshal(a.AggResponseValuesValuesItemList)
	case "stringDoubleMap":
		return json.Marshal(a.StringDoubleMap)
	}
}

type AggResponseValuesValuesVisitor interface {
	VisitAggResponseValuesValuesItemList([]*AggResponseValuesValuesItem) error
	VisitStringDoubleMap(map[string]float64) error
}

func (a *AggResponseValuesValues) Accept(v AggResponseValuesValuesVisitor) error {
	switch a.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", a.typeName, a)
	case "aggResponseValuesValuesItemList":
		return v.VisitAggResponseValuesValuesItemList(a.AggResponseValuesValuesItemList)
	case "stringDoubleMap":
		return v.VisitStringDoubleMap(a.StringDoubleMap)
	}
}
