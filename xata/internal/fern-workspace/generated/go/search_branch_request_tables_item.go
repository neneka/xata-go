// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

type SearchBranchRequestTablesItem struct {
	typeName                              string
	String                                string
	SearchBranchRequestTablesItemBoosters *SearchBranchRequestTablesItemBoosters
}

func NewSearchBranchRequestTablesItemFromString(value string) *SearchBranchRequestTablesItem {
	return &SearchBranchRequestTablesItem{typeName: "string", String: value}
}

func NewSearchBranchRequestTablesItemFromSearchBranchRequestTablesItemBoosters(value *SearchBranchRequestTablesItemBoosters) *SearchBranchRequestTablesItem {
	return &SearchBranchRequestTablesItem{typeName: "searchBranchRequestTablesItemBoosters", SearchBranchRequestTablesItemBoosters: value}
}

func (s *SearchBranchRequestTablesItem) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typeName = "string"
		s.String = valueString
		return nil
	}
	valueSearchBranchRequestTablesItemBoosters := new(SearchBranchRequestTablesItemBoosters)
	if err := json.Unmarshal(data, &valueSearchBranchRequestTablesItemBoosters); err == nil {
		s.typeName = "searchBranchRequestTablesItemBoosters"
		s.SearchBranchRequestTablesItemBoosters = valueSearchBranchRequestTablesItemBoosters
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s SearchBranchRequestTablesItem) MarshalJSON() ([]byte, error) {
	switch s.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return json.Marshal(s.String)
	case "searchBranchRequestTablesItemBoosters":
		return json.Marshal(s.SearchBranchRequestTablesItemBoosters)
	}
}

type SearchBranchRequestTablesItemVisitor interface {
	VisitString(string) error
	VisitSearchBranchRequestTablesItemBoosters(*SearchBranchRequestTablesItemBoosters) error
}

func (s *SearchBranchRequestTablesItem) Accept(v SearchBranchRequestTablesItemVisitor) error {
	switch s.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", s.typeName, s)
	case "string":
		return v.VisitString(s.String)
	case "searchBranchRequestTablesItemBoosters":
		return v.VisitSearchBranchRequestTablesItemBoosters(s.SearchBranchRequestTablesItemBoosters)
	}
}
