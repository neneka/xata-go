// SPDX-License-Identifier: Apache-2.0

// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// Booster Expression
type BoosterExpression struct {
	typeName                        string
	BoosterExpressionValueBooster   *BoosterExpressionValueBooster
	BoosterExpressionNumericBooster *BoosterExpressionNumericBooster
	BoosterExpressionDateBooster    *BoosterExpressionDateBooster
}

func NewBoosterExpressionFromBoosterExpressionValueBooster(value *BoosterExpressionValueBooster) *BoosterExpression {
	return &BoosterExpression{typeName: "boosterExpressionValueBooster", BoosterExpressionValueBooster: value}
}

func NewBoosterExpressionFromBoosterExpressionNumericBooster(value *BoosterExpressionNumericBooster) *BoosterExpression {
	return &BoosterExpression{typeName: "boosterExpressionNumericBooster", BoosterExpressionNumericBooster: value}
}

func NewBoosterExpressionFromBoosterExpressionDateBooster(value *BoosterExpressionDateBooster) *BoosterExpression {
	return &BoosterExpression{typeName: "boosterExpressionDateBooster", BoosterExpressionDateBooster: value}
}

func (b *BoosterExpression) UnmarshalJSON(data []byte) error {
	valueBoosterExpressionValueBooster := new(BoosterExpressionValueBooster)
	if err := json.Unmarshal(data, &valueBoosterExpressionValueBooster); err == nil {
		b.typeName = "boosterExpressionValueBooster"
		b.BoosterExpressionValueBooster = valueBoosterExpressionValueBooster
		return nil
	}
	valueBoosterExpressionNumericBooster := new(BoosterExpressionNumericBooster)
	if err := json.Unmarshal(data, &valueBoosterExpressionNumericBooster); err == nil {
		b.typeName = "boosterExpressionNumericBooster"
		b.BoosterExpressionNumericBooster = valueBoosterExpressionNumericBooster
		return nil
	}
	valueBoosterExpressionDateBooster := new(BoosterExpressionDateBooster)
	if err := json.Unmarshal(data, &valueBoosterExpressionDateBooster); err == nil {
		b.typeName = "boosterExpressionDateBooster"
		b.BoosterExpressionDateBooster = valueBoosterExpressionDateBooster
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BoosterExpression) MarshalJSON() ([]byte, error) {
	switch b.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", b.typeName, b)
	case "boosterExpressionValueBooster":
		return json.Marshal(b.BoosterExpressionValueBooster)
	case "boosterExpressionNumericBooster":
		return json.Marshal(b.BoosterExpressionNumericBooster)
	case "boosterExpressionDateBooster":
		return json.Marshal(b.BoosterExpressionDateBooster)
	}
}

type BoosterExpressionVisitor interface {
	VisitBoosterExpressionValueBooster(*BoosterExpressionValueBooster) error
	VisitBoosterExpressionNumericBooster(*BoosterExpressionNumericBooster) error
	VisitBoosterExpressionDateBooster(*BoosterExpressionDateBooster) error
}

func (b *BoosterExpression) Accept(v BoosterExpressionVisitor) error {
	switch b.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", b.typeName, b)
	case "boosterExpressionValueBooster":
		return v.VisitBoosterExpressionValueBooster(b.BoosterExpressionValueBooster)
	case "boosterExpressionNumericBooster":
		return v.VisitBoosterExpressionNumericBooster(b.BoosterExpressionNumericBooster)
	case "boosterExpressionDateBooster":
		return v.VisitBoosterExpressionDateBooster(b.BoosterExpressionDateBooster)
	}
}
